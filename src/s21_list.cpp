#include <iostream>
#include <initializer_list> // –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è initializer_list
#include <stdexcept>
#include <limits>

namespace s21{

  template <typename T>

  class List {

  private:
    struct Node { // —Å—Ç—É—Ä—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞
      T data;
      Node* next; // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥
      Node* prev; // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
      Node(const T& value): data(value), next(nullptr), prev(nullptr){}
    };

    Node* head_;  // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤—É—é
    Node* tail_;  // –ø–æ—Å–ª–µ–¥–Ω—è—è
    size_t size_; // —Ä–∞–∑–º–µ—Ä
  public:

    using value_type = T;
    using reference = T&;
    using const_reference = const T&;
    //using iterator = T*;
    //using const_iterator = const T*;
    using size_type = size_t;

    /*------- –ö–û–ù–°–†–£–ö–¢–û–†–´ -------*/
    List(size_type n) : List() {
    for (size_type i = 0; i < n; ++i) {
      push_back(value_type{});  // —Å–æ–∑–¥–∞—ë–º "–ø—É—Å—Ç–æ–π" –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ T
    }
}

    /*–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–ø–∏—Å–∫–∞*/
    List(std::initializer_list<value_type> const& items) : List() {
      for (const auto& item : items) {
        push_back(item);
      }
    }

    /*–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é*/
    List(): head_(nullptr), tail_(nullptr), size_(0){}

    ~List(){
      while(head_){
        Node* temp = head_;
        head_ = head_->next;
        delete temp;
      }
    }

    /* –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è */
    List(const List& other) : List(){ // –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      Node* current = other->head_; // –Ω–∞—á–∏–Ω–∞–µ–º —Å –≥–æ–ª–æ–≤—ã —á—É–∂–æ–≥–æ —Å–ø–∏—Å–∫–∞
      while(current){ // –ø–æ–∫–∞ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
        push_back(current->data); // –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        current = current->next;  // –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
      }
    }

    // ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    List(List&& other) noexcept {
      head_ = other.head_;
      tail_ = other.tail_;
      size_ = other.size_;
      other.head_ = nullptr;
      other.tail_ = nullptr;
      other.size_ = 0;
    }

    List& operator=(const List& other){ // ‚Äî –∫–æ–ø–∏—Ä—É—é—â–µ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
      if(this != &other){
        while(head_){
          Node* temp = head_;
          head_ = head_->next;
          delete temp;
        }
        tail_ = nullptr;
        size_ = 0;
         // —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Å–ø–∏—Å–∫–∞
        Node* current = other.head_;
        while (current) {
          push_back(current->data);
          current = current->next;
        }
      }
      return *this;
    }

    // ‚Äî –ø–µ—Ä–µ–º–µ—â–∞—é—â–µ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
    List& operator=(List&& other) noexcept {
      if(this != &other){
        while(head_){
          Node* temp = head_;
          head_ = head_->next;
          delete temp;
        }
        tail_ = nullptr;
        size_ = 0;
        head_ = other.head_;  // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª–∏
        tail_ = other.tail_;
        size_ = other.size_;

        other.head_ = nullptr;  // –û–±–Ω—É–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        other.tail_ = nullptr;
        other.size_ = 0;
      }
    }

    /*  ------ –ú–ï–¢–û–î–´ ------*/

    /*–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü*/
    void push_back(const T& value){
      Node* newNode = new Node(value); // –≤—ã–¥–µ–ª–∏–ª –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      if(tail_){ // –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è —Å—Ç—É–∫—Ç—É—Ä–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        tail_->next = newNode;  // –¥–æ–±–∞–≤–ª–∏ –≤ –∫–æ–Ω–µ—Ü
        newNode->prev = tail_;  //  –¥–æ–±–∞–≤–ª–∏ —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–ª–∞ –ø—Ä–µ–¥–∏–¥—É—â–µ–π
        tail_ = newNode;  //  –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–ª–∞ —Ç–æ–π —á—Ç–æ –º—ã —Å–¥–µ–ª–∞–ª–∏
      }else {
        head_ = tail_ = newNode; // –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è —Ç–æ —Å–æ–∑–¥–∞–µ–º –≥–æ–ª–æ–≤—É –∏ —Ö–≤–æ—Å—Ç
      }
      ++size_;
    }

    /*—É–¥–∞–ª–µ–Ω–∏—è —Å –∫–æ–Ω—Ü–∞*/
    void pop_back(){
      if(tail_){
        if (!tail_) return;  // –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        Node* temp = tail_; // –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞–Ω–µ—Ç —Ö–≤–æ—Å—Ç–æ–º
        tail_ = tail_->prev; // —Ö–≤–æ—Å—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–µ–º
        if(tail_){  //–ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 1 —ç–ª–µ–º–µ–Ω—Ç–∞
          tail_->next = nullptr; // –æ–±–Ω—É–ª–∏–ª —Å–ª–µ–¥ —É–∫–∞–∑–∞—Ç–µ–ª—å
        }else{
          head_ = nullptr; // –µ—Å–ª–∏ 1—ç–ª–µ–º–µ–Ω—Ç –æ–±–Ω—É–ª—è–µ–º –≥–æ–ª–æ–≤—É
        }
        delete temp; //—É–¥–∞–ª—è–µ–º —Å–∞–º —Ö–≤–æ—Å—Ç
        --size_;
      
      }
    }

    /*–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ*/
    void push_front(const T& value){
      Node* newNode = new Node(value);
      if(head_){
        newNode->next = head_;
        head_->prev = newNode;
        head_ = newNode;
      }else {
        head_ = tail_ = newNode;  // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
      }
      ++size_;
    }

    /*—É–¥–∞–ª–µ–Ω–∏—è —Å –≥–æ–ª–æ–≤—ã*/
    void pop_front(){
      if (!head_) return;
      Node* temp = head_;
      head_ = head_->next;
      if(head_){
        head_->prev = nullptr;
      }else {
        tail_ = nullptr;
      }
      delete temp;
      --size_;

    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å–ø–∏—Å–∫–∞
    void print() {
      Node* current = head_; // –Ω–æ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –≥–æ–ª–æ–≤—É
      while (current) {       // –ø–æ–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —á—Ç–æ —Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç
        std::cout << current->data << " ";  // –ø—Ä–∏–Ω—Ç—É–µ–º –æ—Ç –Ω–∞—á–∞–ª–∞ —Å –ø—Ä–æ–±–µ–ª–æ–º
        current = current->next;  // –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º —Å–ª–µ–¥ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
      }
      std::cout << std::endl; // –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
    }
    
    /* ---- –ú–ï–¢–û–î–´ ---- */

    /* –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É */
    bool empty() const {
      return size_ == 0;
    }
    
    size_type max_size() const {
      return std::numeric_limits<size_type>::max() / sizeof(Node);
    } 
    /* –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ */
    size_type size() const {
      return size_;
    }

    /*–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫*/
    void clear() {
      while (head_) {
        Node* temp = head_;
        head_ = head_->next;
        delete temp;
      }
      tail_ = nullptr;
      size_ = 0;
    }

    /*—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç*/
    reference front() {
      if (!head_) {
        throw std::out_of_range("List is empty");
      }
      return head_->data;
    }
    
    /*—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç*/
    const_reference front() const {
      if (!head_) {
        throw std::out_of_range("List is empty");
      }
      return head_->data;
    }

    /*—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç*/
    reference back() {
      if (!tail_) {
        throw std::out_of_range("List is empty");
      }
      return tail_->data;
    }

    /*—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç*/
    const_reference back() const {
      if (!tail_) {
        throw std::out_of_range("List is empty");
      }
      return tail_->data;
    }

    class iterator {
      friend class List<T>;

      private:

      /**/
      Node* current_;  // —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
      
      public:

      /**/
      iterator(Node* node) : current_(node) {}
      // –†–∞–∑—ã–º–µ–Ω–æ–≤–∞–Ω–∏–µ ‚Äî –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
      T& operator*() const { return current_->data; }     // *it ‚Äî –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

      /**/
      iterator& operator++() {
        current_ = current_->next;
        return *this;
      }

      /**/
      iterator& operator--() {
        current_ = current_->prev;
        return *this;
      }

      /**/
      bool operator!=(const iterator& other) const {      // —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        return current_ != other.current_;
      }
      bool operator==(const iterator& other) const {
        return current_ == other.current_;
      }
    };

    iterator begin() { return iterator(head_); }
    iterator end() { return iterator(nullptr ); }
    iterator insert(iterator pos, const_reference value){
      
      Node* newNode = new Node(value); // —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –≤—ã–¥–µ–ª–∏–ª–∏ —Å—Ç—É–∫—Ç—É—Ä–µ –ø–∞–º—è—Ç—å
      Node* pos_node = pos.current_;  // –ø–æ–ª—É—á–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª
      newNode->next = pos_node; // –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–ª–µ–¥ —ç—Ç–æ –∏–µ—Ç—Ä–∞—Ç–æ—Ä
      if(pos_node){
        newNode->prev = pos_node->prev;
        if(pos_node->prev){
          pos_node->prev->next = newNode;
        }else {
          head_ = newNode;
        }
        pos_node->prev = newNode;
      }else {
        // –í—Å—Ç–∞–≤–∫–∞ –≤ –∫–æ–Ω–µ—Ü (pos == end())
        newNode->prev = tail_;
        if (tail_) tail_->next = newNode;
        tail_ = newNode;
        if (!head_) head_ = newNode;
      }
      ++size_;
      return iterator(newNode);
        
    }

    /*
       ---- –ò–¢–ï–†–ê–¢–û–†–´ ----)
üîÅ –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
 iterator begin()

 iterator end()

 const_iterator begin() const

 const_iterator end() const

–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –ø–æ—Ç–æ–º—É —á—Ç–æ T* –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è List (—É —Ç–µ–±—è Node*, –∞ –Ω–µ –º–∞—Å—Å–∏–≤ –≤ –ø–∞–º—è—Ç–∏).

‚ûï –ú–µ—Ç–æ–¥ –≤—Å—Ç–∞–≤–∫–∏ –ø–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—É:
 iterator insert(const_iterator pos, const_reference value)

‚ùå –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä—É:
 iterator erase(const_iterator pos)

    üîÅ –û–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –∏ —Å–ª–∏—è–Ω–∏—è:
 void swap(List& other)

 void merge(List& other)

 void splice(const_iterator pos, List& other)

 void reverse()

 void unique()

 void sort()
    */
  
  };
}

/*
int main(){
  s21::List<int> myList = {1, 2, 3, 4};
  myList.print();
  myList.push_front(99);
  myList.print();

  return 0;
}*/